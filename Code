import numpy as np
import cv2 as cv
import copy
import math

def nothing(args):pass
cv.namedWindow("setup")

cv.createTrackbar("H_min_1", "setup", 0, 255, nothing)
cv.createTrackbar("H_max_1", "setup", 14, 255, nothing)
cv.createTrackbar("S_min_1", "setup", 28, 255, nothing)
cv.createTrackbar("S_max_1", "setup", 85, 255, nothing)
cv.createTrackbar("V_min_1", "setup", 73, 255, nothing)
cv.createTrackbar("V_max_1", "setup", 253, 255, nothing)

cv.createTrackbar("H_min_2", "setup", 149, 255, nothing)
cv.createTrackbar("H_max_2", "setup", 182, 255, nothing)
cv.createTrackbar("S_min_2", "setup", 19, 255, nothing)
cv.createTrackbar("S_max_2", "setup", 80, 255, nothing)
cv.createTrackbar("V_min_2", "setup", 84, 255, nothing)
cv.createTrackbar("V_max_2", "setup", 193, 255, nothing)

vid_path = "driving.mp4"
cam = cv.VideoCapture(vid_path)

cv.resizeWindow("setup", 900, 200)

kernel_er = np.ones((25, 25), np.uint8)
kernel_dil = np.ones((20, 20), np.uint8)

pause = False
first_ten_frame = True
j = 0

mas_angle = []

while True:  
    if (not pause):
        success, frame_ = cam.read()

    if (success == False):
        cam.release()
        cam = cv.VideoCapture(vid_path)
        continue

    frame = copy.deepcopy(frame_)

    frame = cv.blur(frame, (11, 11))
    
    hsv = cv.cvtColor(frame, cv.COLOR_BGR2HSV)
    
    H_min_1 = cv.getTrackbarPos('H_min_1', 'setup')
    H_max_1 = cv.getTrackbarPos('H_max_1', 'setup')
    S_min_1 = cv.getTrackbarPos('S_min_1', 'setup')
    S_max_1 = cv.getTrackbarPos('S_max_1', 'setup')
    V_min_1 = cv.getTrackbarPos('V_min_1', 'setup')
    V_max_1 = cv.getTrackbarPos('V_max_1', 'setup')
    min_p_1 = (H_min_1, S_min_1, V_min_1)
    max_p_1 = (H_max_1, S_max_1, V_max_1)
    cam_mask_1 = cv.inRange(hsv,  min_p_1, max_p_1)

    H_min_2 = cv.getTrackbarPos('H_min_2', 'setup')
    H_max_2 = cv.getTrackbarPos('H_max_2', 'setup')
    S_min_2 = cv.getTrackbarPos('S_min_2', 'setup')
    S_max_2 = cv.getTrackbarPos('S_max_2', 'setup')
    V_min_2 = cv.getTrackbarPos('V_min_2', 'setup')
    V_max_2 = cv.getTrackbarPos('V_max_2', 'setup')
    min_p_2 = (H_min_2, S_min_2, V_min_2)
    max_p_2 = (H_max_2, S_max_2, V_max_2)
    cam_mask_2 = cv.inRange(hsv,  min_p_2, max_p_2)

    cam_mask = cv.bitwise_or(cam_mask_2, cam_mask_1)

    eroded = cv.morphologyEx(cam_mask, cv.MORPH_ERODE, kernel_er)
    dilated = cv.morphologyEx(eroded, cv.MORPH_DILATE, kernel_dil)
    output = cv.connectedComponentsWithStats(dilated)
    (num_labels, labels, stats, centroid) = output
    max_ar = [0, 0]

    new_labels = np.asarray(labels, np.uint8)

    for i in range(1, num_labels): 
        area = stats[i, cv.CC_STAT_AREA]
        if (area > max_ar[0]):
            max_ar[0] = area
            max_ar[1] = i

    x1 = stats[max_ar[1], cv.CC_STAT_LEFT]
    y1 = stats[max_ar[1], cv.CC_STAT_TOP]
    w1 = stats[max_ar[1], cv.CC_STAT_WIDTH]
    h1 = stats[max_ar[1], cv.CC_STAT_HEIGHT]

    x_c = centroid[max_ar[1], 0].astype("int")
    y_c = centroid[max_ar[1], 1].astype("int")

    max_x = stats[0,2]
    max_y = stats[0,3]

    new_labels[new_labels != max_ar[1]] = 0
    new_labels[new_labels == max_ar[1]] = 1

    frame_con = frame.copy()
    frame_mod_con = frame.copy()

    contours, hierarchy = cv.findContours(new_labels, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE)
    contour = contours[0]
    cv.drawContours(frame_con, contours, -1, (255, 0, 0), 2, cv.LINE_AA)

    hull = cv.convexHull(contour)

    peri = cv.arcLength(hull, True)
    approx = cv.approxPolyDP(hull, 0.04 * peri, True)
    cv.drawContours(frame_mod_con, [approx], -1, (255, 0, 0), 2, cv.LINE_AA)

   # cv.line( frame, (x_c, y_c), (max_x // 2, max_y // 2), (100, 100, 100), 3)
   # cv.line (frame, (max_x//2, y_c), (max_x // 2, max_y//2), (0, 0, 255), 3)
    
    if y_c > max_y//2:
        x = y_c - max_y//2
    else:
        x = max_y//2 - y_c
    if max_x//2 > x_c:
        y = max_x // 2 - x_c
    else:
        y = x_c - max_x // 2
    
    ang = math.atan(y / x)
    angle = round(math.degrees(ang))
 
    if first_ten_frame ==False:
        new_angle = angle
        avg_angle = round(0.95 * avg_angle + 0.05 * new_angle) 
    else:
        if first_ten_frame == True and j < 10:
            j += 1
            new_angle = angle
            avg_angle = round(0.95 * avg_angle + 0.05 * new_angle) 
            mas_angle.append(avg_angle)
        else:
             if first_ten_frame == True and j == 1:
                avg_angle = angle
                mas_angle.append(avg_angle)
                j += 1
             else:
                if first_ten_frame == True and j == 10:
                    first_ten_frame = False
                    new_angle = angle
                    avg_angle = round(0.95 * avg_angle + 0.05 * new_angle)
                    mas_angle.append(avg_angle)
                        
    cor_angle = round(sum(mas_angle) / len(mas_angle)) 
    if avg_angle >= -cor_angle - 5 and avg_angle <= cor_angle + 5:
        cv.putText(frame, "go straight", (560, 100), cv.FONT_HERSHEY_SIMPLEX , 1, (255, 255, 255), 4)
        cv.line(frame, (max_x//2,120), (max_x//2, 160), (0,0,0, 4))
        cv.line(frame, (max_x//2,120), (max_x//2 - 15, 135), (0,0,0, 4))
        cv.line(frame, (max_x//2,120), (max_x//2 + 15, 135), (0,0,0, 4))
        
    else:
        if avg_angle > cor_angle and x_c < max_x//2:
            cv.putText(frame, f"Turn right {avg_angle} degrees", (450, 100), cv.FONT_HERSHEY_SIMPLEX , 1, (255, 255, 255), 4)
            cv.line(frame, (max_x//2 - 20,140), (max_x//2 + 20, 140), (0,0,0, 4))
            cv.line(frame, (max_x//2 + 20, 140), (max_x//2 + 5, 125), (0,0,0, 4))
            cv.line(frame, (max_x//2 + 20, 140), (max_x//2 + 5, 155), (0,0,0, 4))
        else:
            cv.putText(frame, f"Turn left {-(avg_angle)} degrees", (450, 100), cv.FONT_HERSHEY_SIMPLEX , 1, (255, 255, 255), 4)
            cv.line(frame, (max_x//2 - 20, 140), (max_x//2 - 5, 125), (0,0,0, 4))
            cv.line(frame, (max_x//2 - 20, 140), (max_x//2 - 5, 155), (0,0,0, 4))
    cv.imshow("frame_mod_con", frame_mod_con)
    cv.imshow("frame_con", frame_con)
    cv.imshow("camera", frame)
    #cv.imshow("cam_mask", cam_mask)
    #cv.imshow("dilated", dilated)
    cv.imshow("new_labels", new_labels * 255 )

    key = cv.waitKey(30) & 0xFF

    if key == ord('p'):
        pause = not pause

    if key == ord('q'):
        break
        
cam.release()
cv.destroyAllWindows()